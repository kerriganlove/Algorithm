9376번 탈옥

DFS 문제라고 생각하고, 각 입구를 기준으로 생각했을 때,
하나의 영역에 갇혀있는 두 사람을 만들기 위해서 이런 것을 했고,
DFS 안에 count를 2개 둬서 풀려고 한다.
1개는 문을 연 갯수, 2개는 죄수를 만난 횟수.
그렇게 되면 한번의 탐색만으로 결정지을 수 있을 것이라고 생각은 하는데
맞는지는 모르겠다.
입구가 여러개일 경우도 이런 식으로 해야한다고 봤다.

그런데 문제점이 있다면, DFS에 따라서 식이 밀려서 만약 내가 원하는 계산이 나오지 않는다면?
visited가 이미 되었다고 판단해 그 다음 방향으로 나아가지 않는다면?

도저히 모르겠어서 분류만 봤을 떄 BFS와 다익스트라로 구분되어 있다.
다익스트라는 최단 경로를 찾는 것. 사실 경로가 중요하지는 않다.
문을 연 개수가 중요할 뿐. 

사람들은 상근이 또한 BFS의 한 축으로 두고, 죄수 2명이 탈출할 때, 겹치는 경우가 문을 연 가장 최소의 개수라고 하고 있다.

맞는 말이라고 생각한다.
그러나 상근이에 대한 BFS를 왜 돌아야하는지를 모르겠다.
이 부분을 이해하기 전까지는 이 문제를 풀지 않아야 할 것 같다.

--------------------------------------------------------------------------------------------

6549번 히스토그램에서 가장 큰 직사각형

분할 정복 or 스택을 활용해서 풀 수 있는 문제다.
분할 정복의 여러 방법 중 세그먼트 트리가 쓰일 수 있으며, 아마 구간 중 가장 작은 높이를 갱신해주는 과정이 아닌가 싶다.

분할 정복의 핵심 아이디어는 넓이의 최댓값을 어떻게 보장해줄지이다.
내가 공부한 방법은 이런식으로 보장했다.

mid를 기준으로 양쪽의 높이 중 큰 것을 고름. (너비가 커지면, 넓이가 커져야하므로)
mid의 height와 선택된 높이 중 작은 것을 고름. ( 직사각형의 형태를 만들어야하기 때문. )
계산한 넓이와 기존 넓이 중 큰 것을 고름. ( 넓이의 최댓값을 보장하기 위해서. )
이를 반복해서 한쪽이 histogram의 범위를 벗어나기 전까지 수행한다.
그 뒤, 범위를 벗어나지 않은 왼쪽 or 오른쪽의 한 범위를 끝까지 수행하여
넓이를 한 번 더 계산한다. 이 과정은 혹시나 잔여로 남아있는 넓이가 기존에 계산해둔 넓이보다 더 클 수도 있고,
너비를 넓히면서 높이가 기존보다 작아져도 넓이가 더 커질 수 있는 경우의 수까지 생각하는 것.

그렇게 양쪽으로 나눈 Area를 구한 뒤, 넓이 비교를 통해서 큰 값을 계속 리턴해주는 방식.

오늘 분할 정복이라는 키워드는 생각해냈으나, 그 방법에 대해서는 깊게 고민을 해보지 않았다.
키워드를 생각해낸 것 역시 여러 키워드 중 하나일 뿐, 제대로 된 풀이를 내놓지는 못했다.
충분히 고민해봐야할 문제라고 생각한다. 어려운 문제들이 많고, 실제 코딩테스트에서는 아이디어조차 제대로 생각나지 않은
문제들이 매우 많다.

이런 아이디어 생각 하나하나가 데이터를 쌓아가는 과정이라 생각하고, 배워야한다.