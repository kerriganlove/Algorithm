1629번 곱셈
(A^B) % C 인데

나는 처음에 어떠한 정수론적인 공식에 의해서 이 문제가 해결된다고 생각했음.
왜냐하면 A,B의 범위가 선을 넘음.
이건 말이 안됨 ㄹㅇ, 그래서 3의 배수와 같은 공식이 있을 줄 알았지만,

이 문제는 Divide and Conquer(분할 정복)의 정석과도 같은 문제임
자세히 보면

(A*A*A*A*A*A*A*A...*A) % C
=> ((A%C)*(A%C)....) % C와 같게 된다
즉, 첫번째 mod 값을 구하기만 해도 모든 형태의 mod 값을 구할 수 있는 것이다.
또한, 숫자가 매우 크게 된다면, Math.pow()와 같은 double형태로 나타낼 때
나누기가 불가한 것은 덤이고, long과 같은 형태로도 담을 수가 없게 될 것이다.
그렇다고 BigInteger 형을 사용하면, Math.pow() 형태를 사용할 수가 없다고 판단하여
일단 그렇게 진행했고, 반씩 나누어 제일 최저의 값을 구한 뒤
1,2,4,8,16... 이런 식으로 올라오면서 최종 개수에 도달하게 되는 것이다.
홀수일때는 실제 값에 한번 더 곱하면서(66->33->16->8->4->2->1)
과 같은 형태일때는 16*16*(1에 대한 mod 값)을 곱해주는 방향으로 가
홀수의 형태를 맞춰서 올려보냈다.

즉, 이 문제는 반복적으로 이루어진 계산의 형태를
특히나 매우 크긴 하지만, 실제 범위는 정해지는 경우?(이와 같은 경우는 나머지는 무조건 int형으로 고정이다.)
일때는 분할 정복을 통해서 계산을 최대한 줄이는 방식으로 접근하는 것이 옳다.

----------------------------------------------------------------------------------------------------------------------

1699번 제곱수의 합

제일 먼저 생각나는건 그리디 알고리즘이다.
허나, 내가 생각한 그리디 알고리즘은 최소 개수를 반환할 수 없다.
왜냐하면, 나는 제일 큰 숫자부터 차례차례로 잘라가는 것을 생각했는데
32와 같은 경우 2개의 제곱수들로 만들 수 있는 것을, 이런 식으로 하게되면 5개의 제곱수로 만들게 된다
(16+16), (25 + 4 + 1 + 1 + 1)

자 그럼 제곱수의 합의 최소 개수는 어떻게 나타낼 것인가.
DP를 통해서 제곱수를 구할 수 있는건 맞는거 같은데.
len을 구해서 그 수를 제한할 수도 있고,
---------------------------------------------- 여기까지가 그냥 생각

DP는 맞았다. 허나 정수론 관점에서 이를 바라봐야 한다.
즉, 이 자연수보다 낮은 값들의 제곱수들에 대한 모든 경우의 수를 따져봐야한다.
즉, DP TABLE에서의 위치의 제곱수일 때, 가장 최소 개수를 의미하게 되는거고,
이를 계산하는 법은, DP TABLE을 기준으로
dp[4]와 dp[4-4](즉, 2^2을 뺀 값) 중 작은 값을 dp[4]의 값으로 여기는 것이고,
이 때 4-4에서 2^2은 1번 제곱값을 쓴 것이므로, +1을 해준다.
맨 처음 초기화시키는 값은 1^2으로만 더해진 값으로 초기화가 되고,
그래서 점화식은 dp[i] = min(dp[i], dp[i-(j*j)]+1) ( j >=2 )
이 된다. 여기서 +1은 j 제곱근을 사용했다는 의미로 해석할 수 있다.





