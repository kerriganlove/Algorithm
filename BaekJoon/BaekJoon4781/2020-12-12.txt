4796번 캠핑

그리디 알고리즘으로 보였다. L,P,V라고 할 때
P > L 이기 때문에, 공간적인 개념에서
--------이라는 P 길이에서 앞에서부터 L 만큼을 채우면 최대 일 수가 된다.
연속적인 조건에서 봤을 때, 휴가가 연결되는 순간 최대 일수가 이루어질 수 없다고 판단하고,
이런식으로 생각해서
L P V = 5 8 20 이라면
8
8
8 3개의 공간으로 나누어, (실제 계산에서는 나누기의 몫으로 계산함)
저 안에 뒷 공간을 제외하고 5를 채워넣는다는 식으로 생각하여 문제를 해결하였다.
그 대신 마지막 공간은 4인데, 이 때는 실제 L 값과 V%P(mod)값을 비교하여
V%P가 크다면, L만큼 사용할 수 있는 것이므로 L, 아니라면 V%P 만큼만 늘릴 수 있다고 판단했다.

-------------------------------------------------------------------

4781번 사탕 가게

다이나믹 프로그래밍 중에서 가장 기초 단계 중 하나인 Knapsack 문제의 일부분으로
0-1 Knapsack 즉, 배낭에 들어가는 물질은 그 자체로 그대로 들어가야 하는 알고리즘이다.
여기서 0-1과는 조금 다른게, 중복적인 물질이 들어갈 수 있다는 점이라고 한다.
이러한 알고리즘을 처음 봐서, 일단 이번에는 검색으로 넘어간다.
아마, dp에서의 M, 즉 가격을 중심으로 돌아가게끔 만드는 것이고,
이중 for문을 사용하여, 지금과 같은 경우는 cal를 최대로 만드는 것이기 때문에(보통은 저장 용량을)
뭐 그런 식으로 짰다고 한다.
Knapsack에 대해서 좀 더 공부해볼 필요성이 생겼다.

그리고 부동 소수점 처리... 이거 신경써서 해야된다.

지금까지 공부해야 하는 알고리즘
1. 오프라인 쿼리
2. 스위핑
3. 세그먼트 트리
4. Knapsack(기본이니까 최대한 빨리)