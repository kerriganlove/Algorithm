2206번 벽 부수고 이동하기

경로가 있고, 0은 길, 1은 벽
최단 경로를 구하는 방식. 나는 BFS를 구현하고, 그걸 벽을 부술 수 있을때마다 1개 부수며
경우의 수를 전부 비교하였다.

일단 시간 초과가 났고, 당연하다고 생각하기는 했다.
BFS 자체가 돌아가는 시간도 있고, 0.1초 동안 돌아가는 for문위에
BFS를 벽이 있을때마다 꽂아넣은거라, 사실상 말이 안되기는 했음.

결론은 BFS인데, 벽을 부술수 있는지 없는지에 대한 check를 같이 해줘야함.
또한, 벽을 부순 경로와 부수지 않은 경로가 겹쳐서 갈 때, 이미 도착한 지점에서의
먼저 온 경로가 visited를 이미 초기화 해놨기 때문에, 다른 한 경로가
이 곳에 도착했을때는 visited 때문에 경로를 갈 수 없다는 판정을 내릴 수도 있다.
그래서 이를 방지하기 위해 visited를 2개의 경로로 나눠서 각각 판정하고,
답을 내놓으면 된다.

---------------------------------------------------------------------------------------

7576번 토마토

BFS를 통해서 일단 답을 도출해내는 데는 성공했는데
얘가 시간 초과를 일으켰음. 그것도 46프로에서...?
내 생각에는 Arrays.deepEquals에서 그런 거 같아서 새로운 그걸 만들어내려고 함.
일단 익지 않은 토마토의 개수를 센 후, 익힐 때마다 개수를 count해서
그 값과 비교한 다음. 만약 같아지면, 전부 익혀졌다는 것이므로, 그 당시의 queue 요소를
answer로 반환했는데, 이게 쌓여져 있는 Queue 안에 답이 있다고 판단했다.
왜냐하면 중간에 토마토의 개수를 전부 바꿔졌는데, 만약에 map을 만드는 중간에 이게
발생해버리면, 실제 답에서 -1이 된다. 즉, map이 n -> n+1로 가는 시점에서 버려지는
요소들의 값이 answer이 되는 경우가 있었다.
그래서 Queue를 전부 비워서 answer 중 가장 큰 수를 답으로 삼아서 풀었다.
