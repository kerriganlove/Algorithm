10989번 수 정렬하기 3

10,000,000이 최대로 돌아갈 수 있는 사례이므로, 거의 O(N)으로 끝내야한다고 생각했고, 그 결과가 Counting Sort였다.
다만, 시간이 적게 걸린 다른 코드들은 countingSum을 따로 구하지 않는 방식을 사용했고, Counting된 배열을 순서대로 그냥
내보내버리면 이 문제는 간단하게 풀리는 것이다. 현재의 경우 한 숫자의 최대 크기가 크지 않으므로, 실제는
10,000,000 + 10,000 정도를 반복적으로 푸는 시간이 가장 오래 걸리는 시간일 것이다. 그렇기 때문에 이 문제의 경우는 단순히 이렇게
풀면 될 것이다.
-> 이것은 N이 작을 경우이므로 가능하지만, 만약 N이 비정상적으로 커져버린다면, 당연히 안될 노릇이다.

그래서 정석적인 방법은 누적합을 구하는 방식을 통해서 정렬할 배열을 역으로 추적하여 누적합을 통해 순서를 알아내는 방식을 취할 것이다.
이렇게 되면 많이 넣어봐야 정렬할 크기만큼만 돌아가게 되서 의미없는 순회를 하지 않아도 되는 것이다.

지금은 이렇게 하는 것이 시간이 더 짧으니까 이렇게 하자.


10815번 숫자 카드

-10,000,000 ~ 10,000,000의 숫자 범위를 가진 배열을 탐색하여 주어진 숫자가 있으면 1, 아니면 0을 출력하는 방식.

일단 배열을 하나하나 찾아가는 비효율적인 방식은 사실상 말도 안되는 것이라고 봐야하므로, 이분 탐색을 이용하기로 함.
일단 왜 이용하게 됬냐면 Arrays에 BinarySearch가 이미 구현되어 있기 때문에 매우 편리하게 구할 수 있기 때문.
단, 정렬을 해야하므로 최초 배열을 받은 후 정렬하고, 정렬 후 binarySearch를 사용하면 간단하게 풀 수 있는 문제.

이것 말고도 원래 생각했던건 dp와 같은 방식으로 만약 있다면 Count 배열을 통해 Counting을 하려고 했다.
물론 메모리가 걸릴지 말지 최대 20,000,001의 Integer 배열을 선언해야하고, 원래는 -값을 집어넣을 방법을 생각 안하고 있기도 해서
그냥 넘어갔는데, 다른 사람은 이를 boolean으로 바꾼 후 아예 20,000,001의 배열로 선언해서 + 10,000,000 형태로 만들어서 저장을 했다.
시간은 더 짧기는 했는데...
앞의 방법이 좀 더 정석으로 푸는 방법이었던 것 같다.