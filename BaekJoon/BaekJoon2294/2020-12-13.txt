3943번 헤일스톤 수열

일단 DP로 풀다가, 이건 도저히 메모이제이션으로 풀 느낌은 아니라서(정확하게는 내가 푼 방식이)
좀 더 새로운 접근이 필요해보인다.

결과론적으로, DP를 이용해서 풀려면, 일부 값에 대한 저장형태로 풀 수 있는거지,
즉, 4,2,1과 같은 반복적인 계산들을 dp를 통해서 저장해두고, 이를 꺼내는 형태로 사용할 수는 있겠으나,
(10000보다 작은수가 되면)
굳이 그렇게 해야하는 이유를 잘 모르겠다.
그냥 재귀라던지, 심지어 n == 1이 되는 조건으로 반복문을 돌려도
문제가 통과하게 된다.
의도는 알겠으나, 굳이 그렇게 해야돼? 라는 생각이 들게 만드는 문제가 아니었나 생각이 든다.

---------------------------------------------------------------------------------------------

2294번 동전 2

DP의 전형적인 문제.

최소값을 찾아내는 문제이므로, DP[i]는 i의 가치에 대한 최소 동전의 개수라고 볼 수 있다.
점화식은 다음과 같다. dp[i] = Math.min(dp[i], dp[i-list[j]+1);
즉, 1,5,12로 16을 만드는 법을 보자

그럼, 1,5,12는 1로 초기화가 되고,
먼저 2에 대해서 dp[2] = dp[2], dp[1]+1 이므로 2가 된다.
그런 식으로 초기화가 되면, dp[16] = 16이 될 것이다.(아마)
그럼 5에서는 16이 안나올거고 10 15가 각각 2와 3으로 대체가 될 것이다.
12는 원래 대체가 되었을 거니까 Pass.
그렇다면 16은 어떻게 구하게 될 것인가
첫 점화식은 dp[16] = dp[16]과 각 list 동전들, 1,5,12에 관한 것이 될 것이다.
1은 이미 했고, 5 같은 경우 dp[11] + 1이므로, dp[11]은 3일 것이다. (dp[11]의 경우 dp[10], dp[6]에 대해서 이미 listup을 했고, 그 결과 3이 됬을 것임)
그래서 dp[16] = 4가 된 시점에서
dp[4]+1과 현재의 값을 비교하면, 5이므로, 최종 값은 4가 되는 것이다.

핵심은 점화식을 어떻게 세우냐는 것이다. 이러한 점에서 나는 아직 DP에 대해서는 1도 모르는 것 같다. 이런 식의 DP에 대한 전형적인 문제를 좀 더
탐구해볼 필요성과, 점화식을 세우는 과정 등을 배워야겠다. 특히, 최소값, 최대값 등에 대해서 이미 이런 문제를 경험해봤는데도 이런 식으로
문제를 푸는 시간이 오래 걸렸다는 것에 대해서 반성과, 꼭 이런 류의 문제를 기억해두어야겠다고 생각했다.