12865번 평범한 배낭

전형적인 백팩 문제.
무게, 가치, 무게 제한이 주어질 때
무게 제한에 맞춰 가치를 가장 높게 만들어라.
그리디 문제에서 가장 잘 나오는 유형.

그리디 문제인줄 알았던 내 자신이 한심스럽다.
백팩은 물건이 나눠지는 문제와 나눠지지 않는 문제로 나뉘게 된다.

이 문제는 물건이 나눠지지 않는 고유의 값이므로 DP를 통해서 풀어야 한다.
이 때, DP 아이디어의 핵심은 얘가 이 무게를 가져갈 수 있냐, 없냐이다.
그래서, Bottom-Up으로 풀 때
dp[i][j] = i번째 물건을 j 무게의 배낭에 넣었을 때의 최대 가치.
라고 생각하면 이해가 쉽다. j 무게의 배낭이라는 말은, 현재 배낭에 j만큼의 무게가 들어갈 수 있고,
그 때의 가치라고 생각을 해두면 해석이 쉬울 것 같다.

아직까지 이해가 안된다. 백팩 문제의 가장 기본적인 문제를 너무 쉽게 놓친 감이 있다.
자주 나오는 문제고, 특히, 한정된 공간에 최대의 이익을 보는 문제는 이렇게 대놓고 주는게 아니라
문제 형식을 꼬아서 주고, 설명을 꼬아서 주는 경우가 많다.
이런 문제에 대한 대비도 항시 해놓아야 한다.

-----------------------------------------------------------------------------------------

3197번 백조의 호수

저번에 풀었던 치즈 문제와 비슷하게, 동서남북이 물에 닿으면 얼음이 없어지는 구조이고,
치즈와는 다르게 구멍이 없어서, 동서남북 중 하나라도 물에 닿으면 얼음이 없어진다.
이런 문제는 풀어봤기 때문에, 빠르게 풀자.

DFS + BFS를 통해서 풀어봤을 때 시간 초과가 났다.
치즈 문제도 이런식으로 했었던 것 같은데...
그건 근데 치즈가 다 녹을때기 때문에 그냥 BFS 2번을 사용했으면 됬고,

아니면 DFS로 구현된 저 방법을 BFS로 교체하는 방법이 있긴 할 거 같은데...
그래서 DFS를 BFS로 교체를 했는데도, 안됨.
내 생각에는 얼음을 녹이는 BFS가 되게 오래 걸리는 거 같긴 한데
얘를 어떻게 바꿔줘야할지를 모르겠다.

사람들의 말은 내가 짜놓은 catch와 map BFS가 각각 딱 1번씩만 돌아야 정답이 된다고 했다.
그게 무슨 말이냐면, catch와 map이 중간에 끊기게 되면, 얘를 새로운 Queue에 저장하고, 이 Queue를 다시 시작점으로 두는
방식으로 BFS를 전개해야 한다.
즉, 1,1에서 시작한 BFS가 중간에 끝날 경우, 다음 Map을 지우던, 백조를 찾던 BFS는 원래 코드였다면 처음부터 다시 탐색을 시작할텐데,
중간에 지점을 저장하게 되면, 그 지점부터 다시 탐색을 시작하게끔 만들면 됨.

여기까지 대충 알았고, 뭐 어떻게 해서 구현을 했는데, 이해하지 못했던 부분이 하나 있었다.
그것이 바로 백조가 있는 곳 또한 물이라는 설정. 사실 읽고 이해를 제대로 못했었다.
그래서 백조가 있는 곳까지 맵이 녹아야 가능했던 것이었다.
그렇게 해서 답을 맞췄다.

일반적인 BFS를 사용했을 때는 visited 배열을 계속 초기화하면서, 앞에서부터 의미없는 탐색을 했기 때문에
혹시나 이런 문제가 다시 나오고, 중간부터 탐색이 가능하다면 생각해봄직한 상황인 것 같다.
