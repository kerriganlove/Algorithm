1. 첫번째 문제는 쉬웠다. 그 전에 팩토리얼을 구현하는 문제를 한 번 접했었고,
그 당시에 풀었던 DP 과정을 그대로 수행함으로써, 한번 O(N) 정도의 계산을 수행하면,
그 뒤는 계산이 이미 되어있기 때문에 dp 값을 그대로 받아오면 됬다. 즉, for문에서 continue를 처리하는 시간만 더해지는 것이다.
이를 O(N)으로 계산할 수는 없다고 판단하여, 이렇게 코드를 작성하였고, 1번만에 정답으로 처리되었다.

2. 처음에는 DP인 줄 알았다. 모든 부분합을 1번만 구하면 그 뒤로 나오는 것들은 보통 continue처리가 된다라고 생각했는데,
즉, 1,2 2,3 3,4 4,5 5,6... 이런 식의 부분합을 한번 모두 구한 뒤 이를 dp 값에 저장해두면 된다고 생각했다.
허나 착각한건, 1~4까지의 값 같은 연속적인 값을 DP로 나타낼 수는 없었고, 만약 나타내고 싶어하면 DP의 테이블 값을 하나하나
정해주는 것이고, DP의 메모리가 최대 int[100000][100000]이 될 것 같아서 포기했다. 메모리의 낭비가 심할것으로 생각했다.
무엇보다도 이와 비슷한 유형을 풀어봤음에도 DP 값으로 나타내려는 것 자체가 문제였다.
이는 투 포인터 알고리즘과 같은 형태로 풀어나가야 하고, 부분합 = 투 포인터 라는 하나의 공식을 세울 수 있게 된 계기라고 생각한다.

어떤 질문에서는 이를 이분 탐색으로 푼다고 하던데, 만약 이분 탐색으로 풀게 된다면, 실제 위치를 저장해둘 테이블 하나와
이를 정렬시킨 후, M 값과 같은 값을 발견하면, 그 숫자들을 박제해두는 형태가 되는 것이라고 생각은 해봤다.
근데 중복되는 자연수가 많을거고, 그 위치를 일일히 다 찾아서 계산하는 것이 과연 이 투 포인터보다 빠를 수 있을까?
라는 생각이 들면서, 애초에 이분 탐색의 시간 복잡도가 매우 작고, Map과 같은 형태로 key와 value에 순서, 값을 저장한 뒤
구해지는 값들에 대해서 value로 집어내 key값을 읽어내고, 만약 key들이 연속적이면 이를 길이로 표현할 수 있을 것이라고 생각은 한다.
허나 구현이 매우 복잡할 것으로 예상되고, 투 포인터 알고리즘이 시간이 아슬아슬하다고는 생각하지 않아서
그냥 이렇게 하려고 한다.
